/* 
INSTRUCTIONS
1. Fire up live server to watch the index.html file
2. Use Firefox inpector > layout to see the grid
   - set the screen to an iPhone 6/7/8 size inititally
3. Starting at line 80 of this stylesheet, go through line by line
  uncommenting the commented out lines to see the effect on the layout.
4. There is repetition of some declarations as they overwrite earlier rules in the CSS
*/

/* color variables */
:root {
  --color1: rgba(22, 68, 127, 1);
  --color2: rgba(240, 129, 55, 1);
  --color3: rgba(131, 75, 65, 1);
  --color4: rgba(230, 160, 172, 1);
  --color5: rgba(100, 120, 123, 1);
  --color6: rgba(239, 193, 55, 1);
}

/* some basic resets */
html {
  box-sizing: border-box;
}
*,
*:before,
*:after {
  box-sizing: inherit;
}
body {
  font-family: Helvetica, sans-serif;
  margin: 0;
  padding: 0;
}

/* some basic colors and styles to make it easier to see the effects of the grid */
.wrapper {
  height: 100vh; /* fill the screen */
  max-width: 960px;
  margin: auto;
}

.one {
  background: var(--color1);
}

.two {
  background: var(--color2);
}

.nested {
  background-color: rgba(100, 120, 169);
}

.three {
  background: var(--color3);
}

.four {
  background: var(--color4);
}

.five {
  background: var(--color5);
}

p {
  color: white;
  margin: 0;
  padding: 0.5rem;
  text-transform: uppercase;
}

p.text {
  text-transform: none;
}

/* grid rules start here... */

/* start with the mobile layout ... fallback for browsers that don't support grid should be the mobile layout, as this will be closest to the semantic structure of the html */

.wrapper {
  /* display: grid; */
  /* set up out 2-column grid */
  /* grid-template-columns: repeat(2, 1fr); */
  /* grid-gap: 10px; */
}

.one {
  /* grid-column-start: 1; */
  /* grid-column-end: 3; */
}
.wrapper {
  /* lets add another column */
  /* grid-template-columns: repeat(3, 1fr); */
  /* and another two rows  - until now the rows have been auto-generated by grid*/
 /* grid-template-rows: repeat(4, 1fr); */
}

.one {
/* elements will flow onto the next row of the grid */
  /* grid-column: 2 / 4; */
}

.two {
  /* all elements will span one column cell unless a grid-colun-end is specified */
  /* grid-column-start: 1; */
  /* grid-row-start: 1; */
  /* grid-row-end: 4; */

  /* display: grid; */
  /* grid-template-columns: repeat(4, 1fr); */
  /* grid-gap: 5px; */
  /* display: flex; */
}

.three {
  /* grid-row-start: 2; */
  /* grid-row-end: 4; */
  /* start and end can be combined into a single rule */
  /* grid-row: 2 / 5; */
  /* and span can be used instead of the end line */
  /* grid-row: 2 / span 2; */
  /* grid-column-start: 3; */
}

.wrapper {
  /* switch back to auto-generated rows */
  /* grid-auto-rows: 1fr; */
}

.four {
  /* grid will automatically generate new rows to fit content as needed */
  /* grid-column-start: 3; */
}

.five {
  /* grid-row: 4 / 6; */
  /* grid-column: 1 / 3; */
}

.four {
  /*grid-area is a shorthand for describing grid-row and grid-columns. If four <grid-line> values are specified, grid-row-start is set to the first value, grid-column-start is set to the second value, grid-row-end is set to the third value, and grid-column-end is set to the fourth value.*/
  /* grid-area: 5 / 3 / 6 / 4; */
  /* and elements can occupy the same grid cell  */
  /* grid-column-start: 2; */
  /* and you can use z-index to bring objects to the front */
  /* z-index: 10; */
  /* and setting opacity values for colors creates nice overlays */
  /* background: rgba(230, 160, 172, 0.7); */
}

/*and elements can be positioned absolutely within the grid container... off grid - uncomment all the rules in the next declaration in one go*/
/* .three {
  position: absolute;
  top: 55vh;
  left: 20%;
  height: calc(60vw - 1rem);
  width: calc(60% - 1rem);
} */

/* switch to an iPad viewport size min 768px wide
and then uncomment the @media query block below

in the grid template areas, a dot represents an empty cell */

/* @media (min-width: 768px) {
  .wrapper {
    all: unset;
    height: 100vh;
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    grid-template-rows: repeat(4, 1fr);
    grid-gap: 0.5rem;
    grid-template-areas:
      'a a a a a'
      'b b b c c'
      'b b b e e'
      '. d d e e';
  }
  .one {
    grid-area: a;
  }
  .two {
    grid-area: b;
  }
  .three {
    all: unset;
    background-color: var(--color3);
    grid-area: d;
  }
  .four {
    grid-area: c;
  }
  .five {
    grid-area: e;
  } */

  /* grids can be nested inside other grids 
  uncomment the nested divs in div.two in index.html, then
  uncomment the next two CSS rules together
  */

  /* .two {
    display: grid;
    grid-template-columns: 1fr 3fr 2fr;
    grid-template-rows: 1fr 4fr;
    grid-column-gap: 0.5rem;
    padding: 0.5rem;
  }

  .two > p {
    grid-column: 1 / span 3;
  } */

  /* and as with flexbox - elements can be aligned within the cells */

  .nested {
    /* align-self: center; */
  }

  .nested:nth-child(odd) {
    /* align-self: end; */
  }

  .nested:last-child {
    /* align-self: start; */
  }
}
